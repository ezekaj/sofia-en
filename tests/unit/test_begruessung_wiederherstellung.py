#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Test f√ºr Wiederherstellung der Begr√º√üungsfunktionen
"""

import sys
import os

# Add src to path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'src'))

async def test_zeitabhaengige_begruessung():
    """Test dass die zeitabh√§ngige Begr√º√üung funktioniert"""
    try:
        from dental_tools import get_zeitabhaengige_begruessung
        from datetime import datetime
        
        print("üß™ Testing: Zeitabh√§ngige Begr√º√üung...")
        
        result = await get_zeitabhaengige_begruessung(context=None)
        
        print(f"Begr√º√üung: {result}")
        
        # Pr√ºfe dass eine Begr√º√üung enthalten ist
        jetzt = datetime.now()
        
        if 6 <= jetzt.hour < 12:
            erwartet = "Guten Morgen"
        elif 12 <= jetzt.hour < 18:
            erwartet = "Guten Tag"
        else:
            erwartet = "Guten Abend"
        
        hat_begruessung = erwartet.lower() in result.lower()
        hat_sofia = "sofia" in result.lower()
        hat_praxis = "praxis" in result.lower() or "zahnarzt" in result.lower()
        
        print(f"   üïê Aktuelle Zeit: {jetzt.hour}:00 Uhr")
        print(f"   üìù Erwartet: {erwartet}")
        print(f"   ‚úÖ Hat Begr√º√üung: {hat_begruessung}")
        print(f"   ‚úÖ Hat Sofia: {hat_sofia}")
        print(f"   ‚úÖ Hat Praxis: {hat_praxis}")
        
        if hat_begruessung and hat_sofia:
            print("‚úÖ KORREKT: Zeitabh√§ngige Begr√º√üung funktioniert")
            return True
        else:
            print("‚ùå FEHLER:")
            if not hat_begruessung:
                print(f"   - Keine {erwartet}-Begr√º√üung")
            if not hat_sofia:
                print("   - Sofia stellt sich nicht vor")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_sie_anrede():
    """Test dass Sofia 'Sie' verwendet"""
    try:
        from dental_tools import telefonnummer_erfragen
        
        print("\nüß™ Testing: 'Sie' Anrede...")
        
        result = await telefonnummer_erfragen(context=None)
        
        print(f"Telefonnummer-Frage: {result}")
        
        # Pr√ºfe dass "Sie" verwendet wird
        hat_sie = "ihre" in result.lower()
        hat_nicht_du = "deine" not in result.lower()
        
        if hat_sie and hat_nicht_du:
            print("‚úÖ KORREKT: Sofia verwendet h√∂fliches 'Sie'")
            return True
        else:
            print("‚ùå FEHLER:")
            if not hat_sie:
                print("   - Verwendet nicht 'Ihre'")
            if not hat_nicht_du:
                print("   - Verwendet 'deine' statt 'Ihre'")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

async def test_komplette_begruessung_workflow():
    """Test des kompletten Begr√º√üungsworkflows"""
    try:
        from dental_tools import get_zeitabhaengige_begruessung, intelligente_praxis_vorschlaege
        
        print("\nüß™ Testing: Kompletter Begr√º√üungsworkflow...")
        
        # Schritt 1: Begr√º√üung
        print("\n   üìã Schritt 1: Begr√º√üung")
        begruessung = await get_zeitabhaengige_begruessung(context=None)
        
        hat_begruessung = any(wort in begruessung.lower() for wort in ["guten morgen", "guten tag", "guten abend"])
        print(f"      ‚úÖ Zeitabh√§ngige Begr√º√üung: {hat_begruessung}")
        
        # Schritt 2: Patientenanfrage
        print("\n   üìã Schritt 2: Patientenanfrage")
        anfrage = await intelligente_praxis_vorschlaege(
            context=None,
            patient_anfrage="Ich habe Schmerzen"
        )
        
        hat_terminvorschlag = "soll ich" in anfrage.lower() and "buchen" in anfrage.lower()
        print(f"      ‚úÖ Intelligenter Terminvorschlag: {hat_terminvorschlag}")
        
        # Bewertung
        workflow_ok = hat_begruessung and hat_terminvorschlag
        
        if workflow_ok:
            print("\n   ‚úÖ KOMPLETTER WORKFLOW FUNKTIONIERT!")
            print(f"      1. Begr√º√üung: {begruessung[:50]}...")
            print(f"      2. Terminvorschlag: {anfrage[:50]}...")
            return True
        else:
            print("\n   ‚ùå Workflow hat Probleme")
            return False
            
    except Exception as e:
        print(f"‚ùå ERROR: {e}")
        return False

async def main():
    """Main test function"""
    print("üöÄ Test: Begr√º√üung Wiederherstellung")
    print("=" * 60)
    print("Problem 1: Sofia sagt nicht mehr 'Guten Morgen'")
    print("Problem 2: Sofia soll 'Sie' verwenden (nicht 'du')")
    print("L√∂sung: Urspr√ºngliche Funktionen wiederherstellen")
    print()
    
    tests = [
        ("Zeitabh√§ngige Begr√º√üung", test_zeitabhaengige_begruessung()),
        ("'Sie' Anrede", test_sie_anrede()),
        ("Kompletter Begr√º√üungsworkflow", test_komplette_begruessung_workflow())
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = await test_func
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå {test_name}: ERROR - {e}")
            results.append((test_name, False))
    
    # Summary
    print("\n" + "=" * 60)
    print("üìä ZUSAMMENFASSUNG:")
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"   {status}: {test_name}")
    
    print(f"\nüéØ GESAMT: {passed}/{total} Tests bestanden ({(passed/total)*100:.1f}%)")
    
    if passed == total:
        print("\nüèÜ FUNKTIONEN WIEDERHERGESTELLT!")
        print("Sofia begr√º√üt wieder zeitabh√§ngig und verwendet 'Sie'!")
        print()
        print("üéØ BEISPIELE:")
        print()
        print("üåÖ MORGENS (6-12 Uhr):")
        print("Sofia: 'Guten Morgen! Hier ist Sofia von der Zahnarztpraxis Dr. Emanuela.'")
        print()
        print("‚òÄÔ∏è TAGS√úBER (12-18 Uhr):")
        print("Sofia: 'Guten Tag! Hier ist Sofia von der Zahnarztpraxis Dr. Emanuela.'")
        print()
        print("üåÜ ABENDS (18-22 Uhr):")
        print("Sofia: 'Guten Abend! Hier ist Sofia von der Zahnarztpraxis Dr. Emanuela.'")
        print()
        print("üìû H√ñFLICHE ANREDE:")
        print("Sofia: 'Wie ist Ihre Telefonnummer?' (nicht 'deine')")
    else:
        print("\n‚ùå Funktionen noch nicht vollst√§ndig wiederhergestellt")
        print("Weitere Anpassungen n√∂tig")
    
    return passed == total

if __name__ == "__main__":
    import asyncio
    success = asyncio.run(main())
    sys.exit(0 if success else 1)
