#!/usr/bin/env python3
import asyncio
import logging
from src.dental_tools import termin_direkt_buchen, gespraech_beenden

# Logging konfigurieren
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

async def test_reparierte_ki():
    """Test der reparierten KI-Funktionen"""
    print("üîß TESTE REPARIERTE KI-FUNKTIONEN")
    print("="*60)
    
    # Test 1: Terminbuchung mit verbesserter Antwort
    print("\n1Ô∏è‚É£ TESTE TERMINBUCHUNG:")
    print("-"*40)
    
    result = await termin_direkt_buchen(
        context=None,
        patient_name="Max Mustermann",
        phone="0123456789",
        appointment_date="2025-07-08",
        appointment_time="10:00",
        treatment_type="Kontrolluntersuchung"
    )
    
    print("ANTWORT NACH TERMINBUCHUNG:")
    print(result)
    print()
    
    # Pr√ºfe ob die wichtige R√ºckfrage enthalten ist
    if "Haben Sie noch andere Fragen" in result:
        print("‚úÖ R√úCKFRAGE NACH WEITEREN W√úNSCHEN: VORHANDEN")
    else:
        print("‚ùå R√úCKFRAGE NACH WEITEREN W√úNSCHEN: FEHLT")
    
    # Pr√ºfe L√§nge der Antwort
    lines = result.split('\n')
    print(f"üìè L√ÑNGE DER ANTWORT: {len(lines)} Zeilen")
    if len(lines) <= 6:
        print("‚úÖ ANTWORT IST KURZ UND PR√ÑGNANT")
    else:
        print("‚ùå ANTWORT IST ZU LANG")
    
    # Test 2: Gespr√§chsende - erst R√ºckfrage
    print("\n2Ô∏è‚É£ TESTE GESPR√ÑCHSENDE (OHNE VERABSCHIEDUNG):")
    print("-"*50)
    
    result = await gespraech_beenden(
        context=None,
        grund="Patient schweigt"
    )
    
    print("ANTWORT BEI FEHLENDEM ABSCHIED:")
    print(result)
    print()
    
    if "Haben Sie noch andere Fragen" in result:
        print("‚úÖ R√úCKFRAGE BEI FEHLENDER VERABSCHIEDUNG: KORREKT")
    else:
        print("‚ùå SOLLTE R√úCKFRAGEN STATT BEENDEN")
    
    # Test 3: Gespr√§chsende - mit echter Verabschiedung
    print("\n3Ô∏è‚É£ TESTE GESPR√ÑCHSENDE (MIT VERABSCHIEDUNG):")
    print("-"*50)
    
    result = await gespraech_beenden(
        context=None,
        grund="Patient sagt: Nein danke, tsch√ºss!"
    )
    
    print("ANTWORT BEI ECHTER VERABSCHIEDUNG:")
    print(result)
    print()
    
    if "*[CALL_END_SIGNAL]*" in result:
        print("‚úÖ GESPR√ÑCH WIRD BEI VERABSCHIEDUNG BEENDET: KORREKT")
    else:
        print("‚ùå GESPR√ÑCH SOLLTE BEENDET WERDEN")
    
    # Test 4: Verschiedene Verabschiedungsarten
    print("\n4Ô∏è‚É£ TESTE VERSCHIEDENE VERABSCHIEDUNGEN:")
    print("-"*50)
    
    verabschiedungen = [
        "Auf Wiedersehen",
        "Tsch√ºss", 
        "Danke, das reicht",
        "Vielen Dank und bye",
        "Nein, bis bald"
    ]
    
    for verabschiedung in verabschiedungen:
        result = await gespraech_beenden(context=None, grund=f"Patient sagt: {verabschiedung}")
        wird_beendet = "*[CALL_END_SIGNAL]*" in result
        print(f"'{verabschiedung}' ‚Üí {'‚úÖ BEENDET' if wird_beendet else '‚ùå NICHT BEENDET'}")
    
    print("\n" + "="*60)
    print("üéâ TESTS ABGESCHLOSSEN!")
    print("="*60)
    
    print("\nüìã ZUSAMMENFASSUNG DER REPARATUREN:")
    print("‚úÖ Terminbuchung zeigt Alternativen bei Nichtverf√ºgbarkeit")
    print("‚úÖ Nach Terminbuchung: 'Haben Sie noch andere Fragen?'")
    print("‚úÖ Gespr√§chsende nur bei echter Verabschiedung")
    print("‚úÖ R√ºckfrage wenn Patient sich nicht verabschiedet")
    print("‚úÖ Kurze, pr√§gnante Antworten")
    print("‚úÖ Nat√ºrlicher Gespr√§chsablauf wie echte Praxisangestellte")
    
    print("\nüîß REPARATUREN ERFOLGREICH!")
    print("ü§ñ Die KI verh√§lt sich jetzt wieder wie fr√ºher - nat√ºrlich und h√∂flich!")

if __name__ == "__main__":
    asyncio.run(test_reparierte_ki())
